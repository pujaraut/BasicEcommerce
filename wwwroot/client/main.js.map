{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/pages/LoginPage.component.ts","./src/app/pages/LoginPage.component.html","./src/app/pages/checkout.component.ts","./src/app/pages/checkout.component.html","./src/app/pages/shopPage.component.ts","./src/app/pages/shopPage.component.html","./src/app/router/index.ts","./src/app/services/authActivator.service.ts","./src/app/services/store.service.ts","./src/app/shared/Order.ts","./src/app/view/cartView.component.ts","./src/app/view/cartView.component.html","./src/app/view/productListView.component.ts","./src/app/view/productListView.component.html","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n    selector: 'the-shop',\n  templateUrl: \"app.component.html\",\n  styles: []\n})\nexport class AppComponent {\n  title = 'Amazon';\n}\n","<div class=\"row\">\r\n    <div class=\"col-12\">\r\n        <h3>{{title}}</h3>\r\n        <router-outlet></router-outlet>\r\n</div>\r\n    </div>","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AppComponent } from './app.component';\r\nimport ProductListView from './view/productListView.component';\r\nimport { Store } from './services/store.service';\r\nimport { CartView } from './view/cartView.component';\r\nimport { AuthActivator } from './services/authActivator.service';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CheckoutPage } from './pages/checkout.component';\r\nimport { ShopPage } from './pages/shopPage.component';\r\nimport { LoginPage } from './pages/LoginPage.component';\r\nimport router from './router';\r\n\r\n\r\n@NgModule({\r\n  declarations: [ \r\n        AppComponent,\r\n        ProductListView,\r\n        CartView,\r\n        ShopPage,\r\n        CheckoutPage,\r\n        LoginPage\r\n  ],\r\n  imports: [\r\n      BrowserModule,\r\n      HttpClientModule,\r\n      router,\r\n      FormsModule\r\n  ],\r\n    providers: [\r\n        Store,\r\n        AuthActivator\r\n    ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '../services/store.service';\r\nimport { LoginRequest, LoginResults } from '../shared/LoginResults';\r\n//import { error } from 'console';\r\n\r\n\r\n\r\n@Component({\r\n    selector: \"login-page\",\r\n    templateUrl: \"LoginPage.component.html\",\r\n})\r\n\r\nexport class LoginPage\r\n{\r\n    errors: any;  \r\n    constructor(private store: Store, private router: Router) { }\r\n\r\n    public creds: LoginRequest = {\r\n        username: \"\",\r\n        password:\"\"\r\n    }\r\n\r\n    //public token = \"\";\r\n    //public expiration = new Date();\r\n\r\n    \r\n\r\n    ////onLogin()\r\n    ////{\r\n    ////    this.store.login(this.creds)\r\n    ////        .subscribe(() => {\r\n    ////            //Successfully logged in\r\n    ////            if (this.store.order.items.length > 0) {\r\n    ////                this.router.navigate([\"checkout\"]);\r\n    ////            }\r\n\r\n    ////            else\r\n    ////            {\r\n    ////                this.router.navigate([\"\"]);\r\n    ////            }\r\n    ////        }, error(() => {\r\n    ////            console.log(error);\r\n    ////            this.errorMessage = \"Failed to login\";\r\n    ////        }));\r\n    ////}\r\n\r\n    //onLogin()\r\n    //{\r\n\r\n    //    this.store.login(this.creds)\r\n    //        .subscribe(\r\n    //            (data: LoginResults) => {\r\n\r\n    //                this.token = data.token;\r\n    //                this.expiration = data.expiration;\r\n    //                // Successfully logged in\r\n\r\n    //                if (this.store.order.items.length > 0)\r\n    //                {\r\n    //                    this.router.navigate([\"checkout\"]);\r\n    //                    console.log(\"Welcome\");\r\n    //                    console.log(data);\r\n    //                    console.log(\"Nepal\");\r\n    //                }\r\n\r\n\r\n    //                else {\r\n    //                    this.router.navigate([\"\"]);\r\n    //                    console.log(data);\r\n    //                } \r\n    //                // Handle result\r\n    //                console.log(data)\r\n    //            },\r\n    //            (                error: any) => {\r\n    //                console.log(error);\r\n    //                this.errorMessage = \"Failed to login\";\r\n    //            });\r\n\r\n\r\n    //}\r\n\r\n    public errorMessage = \"\";\r\n\r\n    onLogin()\r\n    {\r\n        this.store.login(this.creds)\r\n            .subscribe(() => {\r\n                //Successfully logged in\r\n                if (this.store.order.items.length > 0)\r\n                {\r\n                    this.router.navigate([\"checkout\"]);\r\n                }\r\n                else\r\n                {\r\n                    this.router.navigate([\"\"]);\r\n                }\r\n            },\r\n                (error: any) => {\r\n                    console.log(error);\r\n                    this.errorMessage = \"Failed to login\";\r\n                });\r\n    }\r\n\r\n}","<!--<div class=\"row\">\r\n    <div class=\"col-md-4 col-md-offset-4\">\r\n        <div *ngIf=\"errorMessage\" class=\"alert alert-danger\">{{errorMessage}}</div>\r\n        <form (submit)=\"onLogin()\"> \r\n            <div class=\"form-group\">\r\n                <label for=\"username\">Username</label>\r\n                <input type=\"text\" class=\"form-control\" name=\"username\" #username=\"ngModel\" [(ngModel)]=\"creds.username\" required />\r\n                <div class=\"text-danger\" *ngIf=\"username.touched && username.errors && username.errors['required']\">Required</div>\r\n                <div *ngIf=\"username.controls['username'].invalid && username.controls['username'].touched\" class=\"text-danger\">\r\n                    <div *ngIf=\"username.controls['username'].errors.required\">\r\n                        Username required.\r\n                    </div>\r\n                </div>\r\n\r\n                <input type=\"text\" class=\"form-control\"  name=\"username\"  #username=\"ngModel\" [(ngModel)]=\"creds.username\" required />\r\n                <span *ngIf=\"username.invalid && username.touched\" class=\"alert alert-danger\">Username field is required</span>\r\n\r\n\r\n            </div> \r\n            <div class=\"form-group\">\r\n                <label for=\"password\">Password</label>\r\n                <input type=\"password\" class=\"form-control\" name=\"password\" #password=\"ngModel\" [(ngModel)]=\"creds.password\" required />\r\n                <span *ngIf=\"password.invalid && password.touched\" class=\"alert alert-danger\">Password field is required</span>\r\n\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <input type=\"submit\" class=\"btn btn-success\" value=\"Login\" [disabled]=\"username.invalid || password.invalid\" />\r\n                <input type=\"submit\" class=\"btn btn-success\" value=\"Login\" />\r\n                <a href=\"#\" class=\"btn btn-default\">Cancle</a>\r\n            </div>\r\n        </form>\r\n        {{creds | json}}\r\n    </div>\r\n    </div>-->\r\n\r\n\r\n<!--pluralsight code-->\r\n\r\n<div class=\"row\">\r\n    <div class=\"col-md-4 col-md-offset-4\">\r\n        <div *ngIf=\"errorMessage\" class=\"alert alert-danger\">{{ errorMessage }}</div>\r\n        <form (submit)=\"onLogin()\">\r\n            <div class=\"form-group\">  \r\n                <label for=\"username\">Username</label>\r\n                <input type=\"text\" class=\"form-control\" name=\"username\" #username=\"ngModel\" [(ngModel)]=\"creds.username\"/>\r\n                <div class=\"text-danger\" *ngIf=\"username.touched && username.invalid && username.errors\"></div>\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n                <label for=\"password\">Password</label>\r\n                <input type=\"password\" class=\"form-control\" name=\"password\" #password=\"ngModel\" [ngModel]=\"creds.password\"/>\r\n                <div class=\"text-danger\" *ngIf=\"password.touched && password.invalid && password.errors\"></div>\r\n            </div>\r\n\r\n            <div class=\"form-group\">\r\n                <input type=\"submit\" class=\"btn btn-success\" value=\"Login\" [disabled]=\"username.invalid || password.invalid\" />\r\n                <a href=\"#\" class=\"btn btn-default\">Cancel</a>\r\n            </div>\r\n        </form>\r\n        {{creds | json}}\r\n    </div>\r\n</div>\r\n\r\n","import { Component } from '@angular/core';\r\nimport { Router } from \"@angular/router\";\r\nimport { Store } from '../services/store.service';\r\n\r\n@Component({\r\n    selector: \"checkout\",\r\n    templateUrl: \"checkout.component.html\",\r\n    styleUrls:['checkout.component.css']\r\n})\r\nexport class CheckoutPage \r\n{\r\n    public errorMessage = \"\";\r\n\r\n    constructor(public store: Store, private router: Router)\r\n    { }\r\n\r\n    onCheckout()\r\n    {\r\n        this.errorMessage = \"\";\r\n        this.store.checkout()\r\n            .subscribe(() => {\r\n                console.log(\"Checkout1\");\r\n                this.router.navigate([\"/\"]);\r\n                console.log(\"Checkout2\");\r\n            },\r\n\r\n\r\n                (error: any) => {\r\n                    console.log(error);\r\n                    this.errorMessage = `Failed to checkout: ${error}`;\r\n                });\r\n    }\r\n   \r\n}","<div class=\"row\">\r\n    <h3>Confirm Order</h3>\r\n\r\n    <div *ngIf=\"errorMessage\" class=\"alert alert-danger\">\r\n        {{errorMessage}}\r\n    </div>\r\n\r\n    <table class=\"table table-bordered table-hover\">\r\n        <tr *ngFor=\"let o of store.order.items\">\r\n            <td><img src=\"/img/{{o.productArtId}}.jpg\" alt=\"o.productTitle\" class=\"img-thumbnail checkout-thumb\" /></td>\r\n            <td>{{o.productCategory}}({{o.productSize}}) - {{o.productArtist}}:{{o.productTitle}}</td>\r\n            <td>{{o.quantity}}</td>\r\n            <td>{{o.unitPrice | currency}}</td>\r\n            <td>{{((o.unitPrice ?? 0) * o.quantity) | currency}}</td>\r\n            </tr>\r\n        </table>\r\n    <div class=\"col-md-4 col-md-offset-8 text-right\">\r\n        <table class=\"table table-condensed\">\r\n            <tr>\r\n                <td class=\"text-right\">Subtotal</td>\r\n                <td class=\"text-right\">{{store.order.subtotal | currency}}</td>\r\n            </tr>\r\n            <tr>\r\n                <td class=\"text-right\">Shipping</td>\r\n                <td class=\"text-right\"> $ 0.00</td>\r\n                </tr>\r\n            <tr>\r\n                <td class=\"text-right\">Total:</td>\r\n                <td class=\"text-right\">{{store.order.subtotal | currency}}</td>\r\n            </tr>\r\n            </table>\r\n        \r\n        <button class=\"btn btn-success\" (click)=\"onCheckout()\">Complete Purchase</button>\r\n        <a routerLink=\"/\" class=\"btn btn-info\">Cancel</a>\r\n        \r\n    </div>\r\n    </div> ","import { Component } from '@angular/core';\r\n \r\n@Component({\r\n    selector:\"shop-page\",\r\n    templateUrl:\"shopPage.component.html\"\r\n})\r\nexport class ShopPage\r\n{\r\n   /* title = 'ShopPage';*/\r\n}     ","<div class=\"row\">\r\n    <div class=\"col-9\">\r\n        <!--<h3>{{title}}</h3>-->\r\n        <product-list></product-list>\r\n    </div>\r\n    <div class=\"col-3\">\r\n        <cart></cart>\r\n    </div>\r\n</div>  ","import { ShopPage } from '../pages/shopPage.component';\r\nimport { CheckoutPage } from '../pages/checkout.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { LoginPage } from '../pages/LoginPage.component';\r\nimport { AuthActivator } from '../services/authActivator.service';\r\n\r\n\r\nconst routes = [\r\n    { path: \"\", component: ShopPage },\r\n    { path: \"checkout\", component: CheckoutPage, canActivate: [AuthActivator] },\r\n    { path: \"login\", component: LoginPage },\r\n    {path:\"**\", redirectTo:\"/\"}\r\n]; \r\n\r\nconst router = RouterModule.forRoot(routes, {\r\nuseHash:false \r\n});\r\n\r\nexport default router;","import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Route, Router } from '@angular/router';\r\nimport { Observable } from \"rxjs\";\r\nimport { Store } from './store.service';\r\nimport { Injectable } from '@angular/core';\r\n\r\n\r\n@Injectable()\r\nexport class AuthActivator implements CanActivate\r\n{  \r\n\r\n    constructor(private store: Store, private router:Router)\r\n    {\r\n\r\n    }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot,\r\n        state: RouterStateSnapshot): boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree>\r\n    {\r\n        if (this.store.loginRequired)\r\n        {\r\n            this.router.navigate([\"login\"])\r\n            return false;\r\n        }\r\n\r\n        else\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    \r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders} from '@angular/common/http';\r\nimport { map} from \"rxjs/operators\";\r\nimport { Product } from '../shared/Product';\r\nimport { Observable } from 'rxjs';\r\nimport { Order, OrderItem } from '../shared/Order';\r\nimport { LoginRequest, LoginResults } from '../shared/LoginResults';\r\n//import { resolveAny } from 'dns';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n     \r\nexport class Store \r\n{\r\n\r\n    constructor(private http: HttpClient)   \r\n    { }\r\n                     \r\n\r\n    //public products: Product[] = [];\r\n\r\n    //public products:Observable<Product[]> = [];\r\n\r\n    public order: Order = new Order();\r\n    public token= \"\";\r\n    public expiration = new Date();\r\n    public data!: string;\r\n\r\n    loadProducts()\r\n    {\r\n        return this.http.get<Product[]>(\"/api/products\");\r\n            //.pipe(map((data: Product[]) => {\r\n\r\n\r\n            //    this.products = data;\r\n            //}));\r\n    }\r\n\r\n \r\n\r\n    get loginRequired(): boolean\r\n    {\r\n        return this.token.length === 0 || this.expiration > new Date();\r\n    }\r\n\r\n     \r\n    //login(creds: LoginRequest)    \r\n    //{\r\n    //    return this.http.post<LoginResults>(\"/account/createtoken\", creds);\r\n    //        //.pipe(map(data => {\r\n    //        //    this.token = data.token;\r\n    //        //    this.expiration = data.expiration\r\n    //        //}));\r\n    //} \r\n\r\n    login(creds: LoginRequest)/*: Observable<LoginResults>*/\r\n    {\r\n        return this.http.post<LoginResults>(\"/account/createtoken\", creds)\r\n            .pipe(map((data: LoginResults) => {\r\n                this.token = data.token;\r\n                this.expiration = data.expiration;\r\n            }));\r\n    }\r\n\r\n\r\n    checkout()\r\n    {\r\n        const headers = new HttpHeaders().set(\"Authorization\", `Bearer ${this.token}`);\r\n        return this.http.post(\"/api/orders\", this.order, {\r\n            headers: headers\r\n        })\r\n            .pipe(map(() => {\r\n                this.order = new Order();\r\n            }));\r\n    }\r\n\r\n\r\n    addToOrder(product:Product)\r\n    {\r\n\r\n        let item:undefined| OrderItem;\r\n\r\n        item = this.order.items.find(o => o.productId === product.id);\r\n\r\n        if (item)\r\n        {\r\n            item.quantity++;\r\n        }\r\n\r\n        else\r\n        {\r\n            item = new OrderItem();\r\n            item.productId = product.id;\r\n            item.productArtist = product.artist;\r\n            item.productArtId = product.artId;\r\n            item.productCategory = product.category;\r\n            item.productTitle = product.title;\r\n            item.productSize = product.size;\r\n            item.unitPrice = product.price;\r\n            item.quantity = 1;\r\n\r\n            this.order.items.push(item);\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n}","export class OrderItem {\r\n    id: number | undefined;\r\n    quantity!: number;\r\n    unitPrice: number | undefined ;\r\n    productId: number | undefined;\r\n    productCategory: string | undefined;\r\n    productSize: string | undefined;\r\n    productTitle: string | undefined;\r\n    productArtist: string | undefined;\r\n    productArtId: string | undefined;\r\n}\r\n\r\nexport class Order {\r\n    items: OrderItem[]=[];\r\n    orderId: number | undefined;\r\n    orderDate: Date=new Date(); \r\n    orderNumber: string | undefined=Math.random().toString(36).substr(2,5);\r\n\r\n\r\n    get subtotal(): number\r\n    {\r\n\r\n        const result = this.items.reduce(\r\n            (tot, val) => {\r\n                return tot + ((val.unitPrice ?? 0) * val.quantity);\r\n\r\n        }, 0);\r\n\r\n        return result;\r\n    }\r\n\r\n}","////import { Component} from '@angular/core';\r\n////import { Store } from '../services/store.service';\r\n////import { Product } from '../shared/product';\r\n////import { Order } from '../shared/order';\r\n\r\nimport { Component } from \"@angular/core\";\r\nimport { Store } from '../services/store.service';\r\nimport { Order } from '../shared/Order';\r\n\r\n////@component({\r\n////    selector: \"cart\",\r\n////    templateurl: \"cartview.component.html\",\r\n////    styleurls: [\"cartview.component.css\"]\r\n    \r\n////})\r\n\r\n////export default class cartview implements oninit\r\n\r\n////export class Cartview \r\n////{ \r\n////    public products: product[] = [];\r\n////    //public order: order[] = [];\r\n////    public orders: order = new order();\r\n\r\n////    constructor(public store: store)\r\n////    {\r\n////    }\r\n\r\n////    ngoninit(): void {\r\n////        this.store.addToOrder(product)\r\n////            .subscribe();\r\n////    }\r\n\r\n////}\r\n\r\n@Component({\r\n    selector: \"cart\",\r\n    templateUrl: \"cartView.component.html\"\r\n    /*styleUrls: [\"cartView.component.css\"]*/\r\n})\r\n\r\nexport class CartView\r\n{\r\n\r\n    //public order: Order = new Order();\r\n\r\n    constructor(public store: Store)\r\n    {\r\n\r\n    }\r\n}","<h3>cart</h3>\r\n<div>count:{{store.order.items.length}}</div>\r\n<table class=\"table table-condensed table-striped\">\r\n    <thead>\r\n        <tr>\r\n            <th></th>\r\n            <th>Product</th>\r\n            <th>Quantity</th>\r\n            <th>Price</th>\r\n            <th>Total</th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <tr *ngFor=\"let item of store.order.items\">\r\n\r\n            <td>\r\n                <img :src=\"/img/{{item.productArtId}}.jpg\" alt=\"{{item.productArtist}}\"\r\n                     class=\"img-fluid product-thumb\" />\r\n            </td>\r\n            <td>{{item.productCategory}}</td>\r\n            <td>{{item.quantity}}</td>\r\n            <td>{{item.unitPrice | currency}}</td>\r\n            <!--if(item.unitPrice && item.quantity)\r\n    {\r\n    return item.unitPrice * item.quantity;\r\n    }\r\n    else\r\n    {\r\n    return not found;\r\n    }-->\r\n            \r\n            <!--if (item.unitPrice && item.quantity == null)\r\n    {\r\n    <td>{{item.unitPrice*item.quantity}}</td>\r\n    }-->\r\n            <!--else\r\n    {\r\n    Some thing wrong\r\n    }-->\r\n\r\n\r\n            <td *ngIf=\"item.unitPrice && item.quantity\">\r\n                {{item.unitPrice*item.quantity | currency}}\r\n            </td>\r\n\r\n        </tr>\r\n        </tbody>\r\n    <tfoot>\r\n        <tr>\r\n            <td colspan=\"5\"><strong>Subtotal: {{store.order.subtotal | currency}}</strong></td>\r\n            </tr>\r\n        </tfoot>\r\n</table>\r\n<a class=\"btn btn-success\" *ngIf=\"store.order.items.length > 0\" routerLink=\"checkout\">checkout</a>\r\n<hr />\r\n ","import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '../services/store.service';\r\nimport { Product } from '../shared/Product';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n    selector:\"product-list\",\r\n    templateUrl: \"./productListView.component.html\",\r\n    styleUrls: [\"productListView.component.css\"]\r\n})\r\n\r\nexport default class ProductListView implements OnInit\r\n{\r\n\r\n    //public c = \"Microsoft\";\r\n\r\n    public products: Product[] = [];\r\n\r\n    //public addToOrder: [] = [];\r\n\r\n    constructor(public store: Store, private http: HttpClient)\r\n    {\r\n        //this.products = store.products;      \r\n    }\r\n\r\n    //microsoft()\r\n    //{\r\n        \r\n    //}\r\n    \r\n    ngOnInit(): void {  \r\n\r\n     \r\n        this.store.loadProducts().subscribe((data: Product[]) => {\r\n\r\n            \r\n            this.products = data;\r\n            console.log(\"before\");\r\n            console.log(data);\r\n            console.log(\"after\");\r\n        });\r\n\r\n        //this.store.loadProducts()\r\n        //    .subscribe(); // <- Kicks off the operation\r\n    }\r\n    //loadProducts() {\r\n\r\n    //    this.http.get<Product[]>('/api/products').subscribe((data: Product[]) => {\r\n    //        this.products = data;\r\n    //    })\r\n\r\n        //this.http.get(\"/api/products\")\r\n        //    .subscribe((data: Product[]) => this.products = data\r\n\r\n\r\n        //);\r\n        //return this.http.get<Observable<Product[]>>(\"/api/products\")\r\n        //    .pipe(map(data =>\r\n        //        this.products = data\r\n        //    ));\r\n    //}\r\n\r\n}","<div class=\"row\">\r\n    <div *ngFor=\"let p of products\" class=\"col-md-4\">\r\n\r\n\r\n        <div class=\"border bg-light rounded p-1\">\r\n            <img src=\"/img/{{p.artId}}.jpg\" class=\"img-fluid product-image\" alt=\"{{p.artist}}\" />\r\n            <h5>{{p.category}} - {{p.size}}</h5>\r\n            <ul class=\"product-props\">\r\n                <li>Price: {{p.price | currency }}</li>\r\n                <li>Artist: {{p.artist}}</li>\r\n                <li>Title: {{p.title}}</li>\r\n                <li>{{p.artDescription}}</li>\r\n            </ul>\r\n            <!--<button id=\"buyButton\" class=\"btn btn-success\">Buy</button>-->\r\n            <button id=\"buyButton\" class=\"btn btn-success\" (click)=\"store.addToOrder(p)\">Buy</button>\r\n        </div>\r\n    </div>\r\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\n\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":[],"sourceRoot":"webpack:///"}